#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ NodeManager
"""

import asyncio
import asyncpg
import bcrypt
import os
from dotenv import load_dotenv
import getpass

load_dotenv()

async def create_admin():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    DATABASE_URL = os.getenv('DATABASE_URL')
    
    if DATABASE_URL:
        # –ï—Å–ª–∏ –µ—Å—Ç—å DATABASE_URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        pool = await asyncpg.create_pool(DATABASE_URL)
    else:
        # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        pool = await asyncpg.create_pool(
            database=os.getenv('DB_NAME', 'nodemanager'),
            user=os.getenv('DB_USER', 'postgres'),
            password=os.getenv('DB_PASSWORD', ''),
            host=os.getenv('DB_HOST', 'localhost'),
            port=int(os.getenv('DB_PORT', '5432'))
        )
    
    try:
        async with pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
            table_exists = await conn.fetchval("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'users'
                )
            """)
            
            if not table_exists:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É...")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users
                await conn.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        id SERIAL PRIMARY KEY,
                        username VARCHAR(50) UNIQUE NOT NULL,
                        password_hash VARCHAR(100) NOT NULL,
                        is_active BOOLEAN DEFAULT true,
                        is_admin BOOLEAN DEFAULT false,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        last_login TIMESTAMP,
                        failed_attempts INTEGER DEFAULT 0,
                        locked_until TIMESTAMP
                    )
                ''')
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
                await conn.execute('CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)')
                
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞")
            
            print("üîë –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ NodeManager\n")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            username = input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'admin'): ").strip()
            if not username:
                username = 'admin'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_exists = await conn.fetchval(
                "SELECT EXISTS(SELECT 1 FROM users WHERE username = $1)",
                username
            )
            
            if user_exists:
                update = input(f"‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å? (y/n): ")
                if update.lower() != 'y':
                    print("–û—Ç–º–µ–Ω–µ–Ω–æ.")
                    return
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
            while True:
                password = getpass.getpass("–ü–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤): ")
                if len(password) < 8:
                    print("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤!")
                    continue
                    
                password_confirm = getpass.getpass("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
                if password != password_confirm:
                    print("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
                    continue
                    
                break
            
            # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
            password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_exists:
                await conn.execute(
                    """
                    UPDATE users 
                    SET password_hash = $1, is_admin = true, 
                        failed_attempts = 0, locked_until = NULL
                    WHERE username = $2
                    """,
                    password_hash, username
                )
                print(f"‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ '{username}' –æ–±–Ω–æ–≤–ª–µ–Ω!")
            else:
                await conn.execute(
                    """
                    INSERT INTO users (username, password_hash, is_admin, is_active)
                    VALUES ($1, $2, true, true)
                    """,
                    username, password_hash
                )
                print(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä '{username}' —Å–æ–∑–¥–∞–Ω!")
            
            print(f"\nüìå –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏:")
            print(f"   URL: http://localhost:8999/login")
            print(f"   –õ–æ–≥–∏–Ω: {username}")
            print(f"   –ü–∞—Ä–æ–ª—å: [–≤–≤–µ–¥–µ–Ω–Ω—ã–π –≤–∞–º–∏ –ø–∞—Ä–æ–ª—å]")
            
    finally:
        await pool.close()

if __name__ == "__main__":
    asyncio.run(create_admin())